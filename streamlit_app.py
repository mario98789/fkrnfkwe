import streamlit as st
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.contacts import SearchRequest
import asyncio
import os

st.set_page_config(page_title="Telegram –ü–∞—Ä—Å–µ—Ä", layout="centered")
st.title("üîÆ –ü–æ–∏—Å–∫ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–∏–∫–∞–º")
st.markdown("–ó–∞–≥—Ä—É–∑–∏ `.session` —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏ t.me-—Å—Å—ã–ª–∫–∏")

uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ .session", type=["session"])
keywords = st.text_area("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", value="—ç–∑–æ—Ç–µ—Ä–∏–∫–∞\n–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è\n—Ç–∞—Ä–æ\n–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è\n–º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã\n–Ω–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞")
start = st.button("üöÄ –ù–∞—á–∞—Ç—å")

async def run_parser(session_path, keyword_list):
    client = TelegramClient(session_path, api_id=12345, api_hash="fake_hash")
    await client.start()

    found_links = set()
    for keyword in keyword_list:
        try:
            result = await client(SearchRequest(q=keyword, limit=100, offset=0))
            for user in result.users:
                if user.username:
                    found_links.add(f"https://t.me/{user.username}")
        except Exception:
            continue

    await client.disconnect()
    return found_links

if uploaded_file and start:
    session_name = "user_session"
    session_path = f"{session_name}.session"
    with open(session_path, "wb") as f:
        f.write(uploaded_file.read())

    with st.spinner("üîé –ò—â–µ–º –∫–∞–Ω–∞–ª—ã..."):
        kw_list = [k.strip() for k in keywords.splitlines() if k.strip()]
        links = asyncio.run(run_parser(session_name, kw_list))

    if links:
        result_text = "\n".join(sorted(links))
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", data=result_text, file_name="channels.txt")
    else:
        st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    os.remove(session_path)
