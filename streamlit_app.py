import streamlit as st
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import InputPeerUser, PeerUser, PeerChannel
from telethon.tl.functions.messages import GetHistoryRequest, GetBotCallbackAnswerRequest
import asyncio
import os
import re

st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä @SearcheeBot", layout="centered")
st.title("ü§ñ –ê–≤—Ç–æ-–ø–∞—Ä—Å–µ—Ä Telegram-–∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ @SearcheeBot")
st.markdown("–ó–∞–≥—Ä—É–∑–∏ `.session` —Ñ–∞–π–ª ‚Äî –∏ –ø–æ–ª—É—á–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ –∫–Ω–æ–ø–∫–µ **¬´–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º¬ª**")

uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ .session —Ñ–∞–π–ª", type=["session"])
start = st.button("üöÄ –ù–∞—á–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É")

async def parse_searcheebot(session_path):
    client = TelegramClient(session_path, api_id=12345, api_hash="0123456789abcdef0123456789abcdef")
    await client.start()
    bot = await client.get_entity("@SearcheeBot")

    await client.send_message(bot, "/start")
    await asyncio.sleep(2)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    msg = await client.get_messages(bot, limit=1)
    if not msg or not msg[0].buttons:
        return []

    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    for row in msg[0].buttons:
        for button in row:
            if "–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" in button.text:
                await client(GetBotCallbackAnswerRequest(
                    peer=bot,
                    msg_id=msg[0].id,
                    data=button.data
                ))
                break

    await asyncio.sleep(3)

    found_links = set()
    while True:
        messages = await client.get_messages(bot, limit=20)
        new_links = set()
        for m in messages:
            if m.message:
                links = re.findall(r'https://t\.me/[^\s\)]+', m.message)
                new_links.update(links)

        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        if not new_links.difference(found_links):
            break

        found_links.update(new_links)

        # –ñ–º—ë–º "More"
        try:
            for m in messages:
                if m.buttons:
                    for row in m.buttons:
                        for button in row:
                            if "More" in button.text:
                                await client(GetBotCallbackAnswerRequest(
                                    peer=bot,
                                    msg_id=m.id,
                                    data=button.data
                                ))
                                await asyncio.sleep(3)
                                raise Exception("clicked")  # –í—ã—Ö–æ–¥ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        except Exception:
            continue
        else:
            break  # –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ More ‚Äî –≤—ã—Ö–æ–¥–∏–º

    await client.disconnect()
    return sorted(found_links)

if uploaded_file and start:
    session_path = "user_session.session"
    with open(session_path, "wb") as f:
        f.write(uploaded_file.read())

    with st.spinner("‚è≥ –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ @SearcheeBot..."):
        try:
            results = asyncio.run(parse_searcheebot(session_path))

            if results:
                result_text = "\n".join(results)
                st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Å—ã–ª–æ–∫.")
                st.download_button("üì• –°–∫–∞—á–∞—Ç—å .txt", result_text, file_name="searchee_links.txt")
            else:
                st.info("üòï –°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    os.remove(session_path)
