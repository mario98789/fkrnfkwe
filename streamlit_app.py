import streamlit as st
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import InputPeerUser, PeerUser, PeerChannel
from telethon.tl.functions.messages import GetHistoryRequest, GetBotCallbackAnswerRequest
import asyncio
import os
import re

st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä @SearcheeBot", layout="centered")
st.title("ü§ñ –ü–∞—Ä—Å–µ—Ä Telegram-–∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ @SearcheeBot")
st.markdown("–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É **üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**")

uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ .session —Ñ–∞–π–ª", type=["session"])
filter_keyword = st.text_input("üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, —ç–∑–æ—Ç–µ—Ä–∏–∫–∞) [–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ]")
start = st.button("üöÄ –ù–∞—á–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É")

async def parse_searcheebot(session_path, filter_keyword=None):
    client = TelegramClient(session_path, api_id=12345, api_hash="0123456789abcdef0123456789abcdef")
    await client.start()
    bot = await client.get_entity("@SearcheeBot")

    await client.send_message(bot, "/start")
    await asyncio.sleep(2)

    msg = await client.get_messages(bot, limit=1)
    if not msg or not msg[0].buttons:
        return []

    for row in msg[0].buttons:
        for button in row:
            if "–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" in button.text:
                await client(GetBotCallbackAnswerRequest(
                    peer=bot,
                    msg_id=msg[0].id,
                    data=button.data
                ))
                break

    await asyncio.sleep(3)

    found_links = set()
    more_clicks = 0
    while True:
        messages = await client.get_messages(bot, limit=20)
        new_links = set()

        for m in messages:
            if m.message:
                links = re.findall(r'https://t\.me/[^\s\)]+', m.message)
                if links:
                    for l in links:
                        if filter_keyword:
                            if filter_keyword.lower() in m.message.lower():
                                new_links.add(l)
                        else:
                            new_links.add(l)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
        if new_links:
            st.text(f"üîó –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫: {len(new_links - found_links)}")

        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ—Ç
        if not new_links.difference(found_links):
            st.text("‚õî –ë–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            break

        found_links.update(new_links)

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "More"
        more_pressed = False
        for m in messages:
            if m.buttons:
                for row in m.buttons:
                    for button in row:
                        if "More" in button.text:
                            await client(GetBotCallbackAnswerRequest(
                                peer=bot,
                                msg_id=m.id,
                                data=button.data
                            ))
                            await asyncio.sleep(3)
                            more_clicks += 1
                            st.text(f"‚û°Ô∏è –ù–∞–∂–∞–ª–∏ 'More' {more_clicks} —Ä–∞–∑")
                            more_pressed = True
                            break
        if not more_pressed:
            st.text("‚úÖ –ö–Ω–æ–ø–∫–∞ 'More' –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            break

    await client.disconnect()
    return sorted(found_links)

if uploaded_file and start:
    session_path = "user_session.session"
    with open(session_path, "wb") as f:
        f.write(uploaded_file.read())

    with st.spinner("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å..."):
        try:
            results = asyncio.run(parse_searcheebot(session_path, filter_keyword))

            if results:
                result_text = "\n".join(results)
                st.success(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Å—Å—ã–ª–æ–∫.")
                st.download_button("üì• –°–∫–∞—á–∞—Ç—å .txt", result_text, file_name="searchee_links.txt")
            else:
                st.info("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    os.remove(session_path)
